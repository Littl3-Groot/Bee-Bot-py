# Imports de tous les modules n√©c√©saires au bon fonctionnement du bot
import discord
from discord.ext import commands, tasks

import random

from config import *

# imports des cogs
import cogs.logs as logs
import cogs.arrive as arrive
import cogs.admin as admin
import cogs.commandes_ammusantes as commandes_ammusantes
import cogs.info_commandes as info_commandes
import cogs.easter_egg as easter_egg

from discord_slash import SlashCommand
from discord_slash.utils.manage_commands import create_option
from discord_slash.utils.manage_components import create_select, create_select_option, create_actionrow
# from discord_slash.model import SlashCommandPermissionType
# from discord.ext.commands import MissingPermissions


import asyncio
import os

from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("TOKEN")

intents = discord.Intents.default()
intents.members = True
intents.messages = True
intents.guilds = True

bot = commands.Bot(command_prefix="!", intents=intents)
bot.remove_command("help")
slash = SlashCommand(bot, sync_commands=True)

# Liste des statuts du bot
status = ["Lords mobile ‚öîÔ∏è", "Mythic Heroes üíé",
          "Regarder Beerus sur Youtube", "manger ! üç¶", "s'auto programmer üë®‚Äçüíª"]

# Change le statut du bot toute les 5 secondes


@tasks.loop(seconds=5)
async def changestatus():
    game = discord.Game(random.choice(status))
    await bot.change_presence(activity=game)

# Affiche dans la console et dans un salon quand le bot est en ligne


@bot.event
async def on_ready():
    print("je suis en ligne !")
    chanel = bot.get_channel(979821289365704704)
    await chanel.send("je suis en ligne !")
    changestatus.start()

# Commandes pour load / unload / reload les cogs (il faut la permission administrateur)


@bot.command()
@commands.has_permissions(administrator=True)
async def load(ctx, name=None):
    if name:
        bot.load_extension(name)


@bot.command()
@commands.has_permissions(administrator=True)
async def unload(ctx, name=None):
    if name:
        bot.unload_extension(name)


@bot.command()
@commands.has_permissions(administrator=True)
async def reload(ctx, name=None):
    if name:
        try:
            bot.reload_extension(name)
        except:
            bot.load_extension(name)

# Commande qui affiche le temps de r√©ponse du bot (ping)


@slash.slash(name="ping", guild_ids=[970708155610837024], description="Affiche le temps de r√©ponse du bot.")
async def ping(ctx):
    """Donne le temps de r√©ponse du bot et l'envoie dans un Embed"""
    embed = discord.Embed(title="Pong ! üèì", description=f'**‚åõ Temps :** {round(bot.latency * 1000)}ms ',
                          color=0x5865F2)
    embed.set_footer(text="demand√© par : " +
                          f'{ctx.author.name}', icon_url=ctx.author.avatar_url)
    await ctx.reply(embed=embed)

# Commande qui affiche la bani√®re de l'utilisateur choisit


@slash.slash(name="banner", guild_ids=[970708155610837024], description="Affiche la banni√®re de l'utilisateur choisit.", options=[
    create_option(name="user",
                  description="L'utilisateur dont tu veux voir la banni√®re.", option_type=6, required=True),
])
async def banner(ctx, user: discord.Member):
    """"R√©cup√®re la bani√®re de 'user' et l'envoie"""
    if user == None:
        user = ctx.author
    req = await bot.http.request(discord.http.Route("GET", "/users/{uid}", uid=user.id))
    banner_id = req["banner"]
    banner_url = "Cet utilisateur n'a pas de bani√®re."
    # If statement because the user may not have a banner
    if banner_id:
        banner_url = f"https://cdn.discordapp.com/banners/{user.id}/{banner_id}.gif?size=1024"
    await ctx.send(f"{banner_url}")


# Commande d'aide du Bot
@bot.command(invoke_without_command=True)
async def help(ctx):
    """Commande d'aide du Bot, Fait plusieur Embed et affiche un menu d√©roulant tout √ßa dans un Embed"""
    serveur = ctx.guild
    user = bot.get_user(970707845249130587)

    # Embed de base Accueil
    embed1 = discord.Embed(
        description=f"Bienvenue dans le message d'aide de {user.mention}, vous pourez voir ici toutes les commandes disponibles.\n\n **Commandes** : \n> - Vous pouvez retrouver toutes les commandes dispognible via le bot avec le menu d√©roulant ci-dessous.\n> - Pour plus d'information sur chaque commande vous avez √† disposition ``/infocommande``.",
        color=0x5865F2,
    )

    embed1.add_field(name="Quelques liens utiles :",
                     value="[Chaine Youtube](https://www.youtube.com/channel/UCqEQpsMTf7WDWLGMIBHzoMg) | [Chaine twitch](https://www.twitch.tv/denverledanosaure) | [Serveur discord](https://discord.gg/4kxj4aJkdn)",
                     inline=False
                     )

    embed1.set_author(name="Bee'Bot",
                      icon_url=user.avatar_url)

    select = create_select(
        options=[
            create_select_option("Menu principal", value="Accueil", emoji="üè†"),
            create_select_option("Information / Serveur",
                                 value="Bot", emoji="ü§ñ"),
            create_select_option("Mod√©ration", value="Mod√©ration", emoji="üî®"),
            create_select_option("Fun", value="Fun", emoji="üòÑ")
        ],
        placeholder="Choisis une cat√©gorie !",
        min_values=1,  # the minimum number of options a user must select
        max_values=1  # the maximum number of options a user can select
    )
    action_row = create_actionrow(select)

    await ctx.send(embed=embed1, components=[action_row])

    # Embed des commandes concernant le Bot
    embedBot = discord.Embed(title="ü§ñ - Information g√©n√©rales et du Serveur",
                             description="- Utilisez ``/infocommande`` pour voir les d√©tails d'une commande.\n\n> ``!help``: Permet de voir la liste de toutes les commandes dispognible sur le serveur.\n> ``/serveur``: Affiche les information du serveur.",
                             color=0x5865F2,
                             )
    # Embed des commandes concernant la Mod√©ration
    embedMod = discord.Embed(title="üî® Mod√©ration - Commandes de mod√©ration",
                             description="- Utilisez ``/infocommande`` pour voir les d√©tails d'une commande.\n\n> ``!say`` : Permet de parler en utilisant le bot.\n> ``!clear`` : Suprimme le nombre de message demand√©.\n> ``!kick`` : Permet de renvoyer une personne du serveur.\n> ``!ban`` : Permet de banir d√©finitivement une personne du serveur.\n> ``!unban`` : Permet de d√©banir une personne du serveur.\n> ``!warn`` : Permet de sanctionner une personne du serveur.",
                             color=0x5865F2,
                             )
    # Embed des commandes Funs
    embedFun = discord.Embed(title="üòÑ Fun - Commandes pour s'ammuser",
                             description="- Utilisez ``/infocommande`` pour voir les d√©tails d'une commande.\n\n> ``/seuil``: Permet de savoir en quel ann√©e le prix de votre objet aura chutter de moiti√©.\n> ``/francs``: Permet de convertir des Euros en Francs.\n> ``/bisextille`` : Vous permet de savoir si un ann√©e est bisextille ou non.\n> ``/dico`` : Permet de savoir quel mot est avant l'autre dans le dictionnaire.\n> ``/decimal`` : Converti un nombre Binaire en nombre d√©cimal.\n> ``/binaire :`` Converti un nombre decimal en binaire.\n> ``/hexa`` : Converti un nombre d√©cimal en hexadecimal.\n> ``!roulette`` : Lance une roulette russe.\n> ``/mdp`` : Vous envoie un message contenant un mot de passe du nombre de caract√®res que vous souhaiter (lim = 4000) et al√©atoire.\n> ``/pdp`` : Renvoie la photo de profil du membre que vous voulez.\n> ``/userinfo`` : Renvoie les information sur l'utilisateur que vous souhaiter",
                             color=0x5865F2,
                             )

    while True:
        try:
            select_interaction = await bot.wait_for("select_option")

            if select_interaction.values[0] == "Accueil":
                await select_interaction.edit_origin(content=" ", embed=embed1)
            elif select_interaction.values[0] == "Bot":
                await select_interaction.edit_origin(content=" ", embed=embedBot)
            elif select_interaction.values[0] == "Mod√©ration":
                await select_interaction.edit_origin(content=" ", embed=embedMod)
            elif select_interaction.values[0] == "Fun":
                await select_interaction.edit_origin(content=" ", embed=embedFun)

        except:
            return

# G√®re l'erreure o√π il ne trouve pas la commande demand√© par l'utilisateur.


@bot.event
async def on_command_error(ctx, error):
    """Quand une commande n'est pas trouv√©e, cela renvoie un message d'erreur et supprime le message de l'utilisateur et du bot dans les 15 secondes apr√®s l'envoie du message d'erreur."""
    if isinstance(error, commands.CommandNotFound):
        embed_erreur = discord.Embed(
            title=f"<:x_:985826783159021628> Erreur !", description=f"La commande ``{ctx.message.content}`` n'existe pas. Veuillez r√©it√©rer votre demande.", color=0xD00000)
        embed_erreur.set_footer(
            text="ce message sera supprim√© dans 15 secondes.")
        embed = await ctx.reply(embed=embed_erreur)
        await asyncio.sleep(15)
        await ctx.message.delete()
        await embed.delete()


@slash.slash(name="test", guild_ids=[970708155610837024], description="Affiche la banni√®re de l'utilisateur choisit.")
async def test(ctx):

    select = create_select(
        options=[
            create_select_option("Lab Coat", value="coat", emoji="ü•º"),
            create_select_option("Test Tube", value="tube", emoji="üß™"),
            create_select_option("Petri Dish", value="dish", emoji="üß´")
        ],
        placeholder="Choose your option",
        min_values=1,  # the minimum number of options a user must select
        max_values=2  # the maximum number of options a user can select
    )
    action_row = create_actionrow(select)

    await ctx.send(components=[action_row])


# Ajout de tous les cogs (autre fichers Python, contenant des commandes, logs ...)
bot.add_cog(logs.Plop(bot))
bot.add_cog(arrive.Arriver(bot))
bot.add_cog(commandes_ammusantes.Divers(bot))
bot.add_cog(admin.Admin(bot))
bot.add_cog(info_commandes.Info(bot))
bot.add_cog(easter_egg.Easter(bot))
bot.run(TOKEN)
